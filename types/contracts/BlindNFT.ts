/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BlindNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "exists"
      | "getEncryptedAttributes"
      | "getEncryptedRarity"
      | "getEncryptedTokenURI"
      | "getRevealedAttributes"
      | "getRevealedTokenURI"
      | "isRevealed"
      | "mint"
      | "ownerOf"
      | "owners"
      | "protocolId"
      | "submitRevealedAttributes"
      | "tokensOfOwner"
      | "totalSupply"
      | "transfer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "NFTMinted" | "NFTRevealed" | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedAttributes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedRarity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedTokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevealedAttributes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevealedTokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRevealed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitRevealedAttributes",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensOfOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedRarity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevealedAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevealedTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRevealed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitRevealedAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
}

export namespace NFTMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    owner: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, owner: string, timestamp: bigint];
  export interface OutputObject {
    tokenId: bigint;
    owner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTRevealedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    rarity: BigNumberish,
    power: BigNumberish,
    speed: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    rarity: bigint,
    power: bigint,
    speed: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    rarity: bigint;
    power: bigint;
    speed: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BlindNFT extends BaseContract {
  connect(runner?: ContractRunner | null): BlindNFT;
  waitForDeployment(): Promise<this>;

  interface: BlindNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  exists: TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  getEncryptedAttributes: TypedContractMethod<
    [tokenId: BigNumberish],
    [[string, string] & { power: string; speed: string }],
    "view"
  >;

  getEncryptedRarity: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  getEncryptedTokenURI: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  getRevealedAttributes: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        rarity: bigint;
        power: bigint;
        speed: bigint;
        revealed: boolean;
      }
    ],
    "view"
  >;

  getRevealedTokenURI: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  isRevealed: TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  mint: TypedContractMethod<[tokenURI: string], [bigint], "nonpayable">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  owners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  submitRevealedAttributes: TypedContractMethod<
    [
      tokenId: BigNumberish,
      rarity: BigNumberish,
      power: BigNumberish,
      speed: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  tokensOfOwner: TypedContractMethod<[owner: AddressLike], [bigint[]], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getEncryptedAttributes"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [[string, string] & { power: string; speed: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEncryptedRarity"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getEncryptedTokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getRevealedAttributes"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        rarity: bigint;
        power: bigint;
        speed: bigint;
        revealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRevealedTokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isRevealed"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[tokenURI: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "owners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitRevealedAttributes"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      rarity: BigNumberish,
      power: BigNumberish,
      speed: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokensOfOwner"
  ): TypedContractMethod<[owner: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NFTMinted"
  ): TypedContractEvent<
    NFTMintedEvent.InputTuple,
    NFTMintedEvent.OutputTuple,
    NFTMintedEvent.OutputObject
  >;
  getEvent(
    key: "NFTRevealed"
  ): TypedContractEvent<
    NFTRevealedEvent.InputTuple,
    NFTRevealedEvent.OutputTuple,
    NFTRevealedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "NFTMinted(uint256,address,uint256)": TypedContractEvent<
      NFTMintedEvent.InputTuple,
      NFTMintedEvent.OutputTuple,
      NFTMintedEvent.OutputObject
    >;
    NFTMinted: TypedContractEvent<
      NFTMintedEvent.InputTuple,
      NFTMintedEvent.OutputTuple,
      NFTMintedEvent.OutputObject
    >;

    "NFTRevealed(uint256,uint64,uint64,uint64,uint256)": TypedContractEvent<
      NFTRevealedEvent.InputTuple,
      NFTRevealedEvent.OutputTuple,
      NFTRevealedEvent.OutputObject
    >;
    NFTRevealed: TypedContractEvent<
      NFTRevealedEvent.InputTuple,
      NFTRevealedEvent.OutputTuple,
      NFTRevealedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
